{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Time resolved NMR data visualization "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is an extra notebook where you can see animations for the time resolved data of the NMR spectrum. Exciting! To do this we are using a different backend as so (see imports below): \n",
    "\n",
    "```python\n",
    "%matplotlib notebook\n",
    "```"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "You do not need to do any programming or writing in this notebook. Just run all cells to see the output. To not confuse the backend, which is a bit finicky - just run the visualization cells (with pyplot/ipywidget code) one at the time. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "%matplotlib notebook"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from IPython.display import Markdown, HTML\n",
    "import ipywidgets as widgets \n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np \n",
    "import matplotlib.pyplot as plt\n",
    "from mpl_toolkits.mplot3d import Axes3D\n",
    "import matplotlib.image as mpimg\n",
    "from matplotlib.animation import FuncAnimation\n",
    "\n",
    "import logging\n",
    "logging.getLogger().setLevel(logging.CRITICAL)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read in data as in main notebook\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "time_r_spectra = pd.read_csv(\"data/NMR/mixture.csv\", header=11, dtype=np.float64) \n",
    "time_r_spectra.index = np.array([round(i,3) for i in np.linspace(0, 11, len(time_r_spectra.index))])\n",
    "time_r_spectra.index.name = r'$\\delta$ (ppm)'\n",
    "time_r_spectra.columns.name = 'Time (s)'\n",
    "time_r_spectra.index = time_r_spectra.index.astype(np.float64) \n",
    "time_r_spectra.columns = time_r_spectra.columns.astype(np.float64) \n",
    "time = time_r_spectra.columns.values\n",
    "ppm = time_r_spectra.index.values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fixed time (ipywidgets)\n",
    "Below we have made an interactive plot using [ipywidgets](https://ipywidgets.readthedocs.io/en/latest/examples/Using%20Interact.html). You can use `ipywidgest` to make interactive plots as below with buttons or with scrollers and a bunch of cool different stuff. When you click on the different buttons you will see the NMR spectra change according to the time it was taken (0 s, 5.051 s or 10 s). "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot(time, ax):\n",
    "    ax.clear()\n",
    "    measurement = time_r_spectra[time].values\n",
    "    ax.plot(ppm, measurement, c=\"b\")\n",
    "    ax.set_ylabel(\"Intensity\", fontsize=12)\n",
    "    ax.set_xlabel(r'$\\delta$ (ppm)', fontsize=12)\n",
    "    ax.set_xlim([8.3, 6.8])\n",
    "    ax.set_ylim([-0.4*10**8, 4.0*10**8])\n",
    "    plt.show()\n",
    "\n",
    "toggle = widgets.ToggleButtons(options=['0.000 s', '5.051 s', '10.000 s'], description='Time:', button_style='')\n",
    "fig, ax = plt.subplots()\n",
    "def on_click(change):\n",
    "    plot(float(change['new'][:-2]), ax)\n",
    "toggle.observe(on_click, 'value')\n",
    "toggle"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Continues time (matplotlib animation)\n",
    "Below we have utilized [matplotlib.animation](https://matplotlib.org/3.1.1/api/animation_api.html) to visualize how the NMR spectra changes as a function of time. <br>\n",
    "Ignore the warning \"*No handles with labels found to put in legend.*\" and the plot created below the video."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig = plt.figure()\n",
    "ax = plt.axes(xlim=(8.3, 6.8), ylim=(-0.4*10**8, 3.6*10**8))\n",
    "line, = ax.plot([], [], lw=3)\n",
    "\n",
    "def init():\n",
    "    line.set_data([], [])\n",
    "    return line,\n",
    "\n",
    "legend = plt.legend()\n",
    "def animate(i):\n",
    "    x = ppm\n",
    "    y = time_r_spectra.iloc[:,i].values\n",
    "    line.set_data(x, y)\n",
    "    line.set_label(\"Time: \" + str(time[i]) + \" s\")\n",
    "    legend = plt.legend(loc='upper left')\n",
    "    return line,\n",
    "\n",
    "anim = FuncAnimation(fig, animate, init_func=init, frames=100, interval=100, blit=True, )\n",
    "# HTML(anim.to_html5_video())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3D plot (matplotlib 3D plotting)\n",
    "\n",
    "Below we have utilized the 3D plotting capabilities of `matplotlib` to visualize the NMR time resolved data in 3 dimensions. You can rotate it around with the mouse!"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fig, ax = plt.subplots(subplot_kw={'projection': '3d'}, figsize=(8.0, 6.0)) # figsize=(8.0*2, 6.0*2)\n",
    "\n",
    "sel = (ppm < 8.4) & (ppm > 6.8)\n",
    "for t in reversed(time):\n",
    "    measurement = time_r_spectra[t].values[sel]\n",
    "    tt = np.full(len(measurement), t)\n",
    "    ax.plot(tt, ppm[sel], measurement, \"b\", lw=0.3)\n",
    "    ax.set_zlabel(r\"Intensity\", fontsize=17, color= \"black\")\n",
    "    ax.set_ylabel(r\"$\\delta$ (ppm)\", fontsize=17, color= \"black\")\n",
    "    ax.set_xlabel(r\"$Time (s) $\", fontsize=17, color= \"black\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "KEMM30",
   "language": "python",
   "name": "kemm30"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
